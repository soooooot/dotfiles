let $BUNDLE = expand("$HOME/.vim/bundle")
let g:python3_host_prog='/usr/local/bin/python3'

call plug#begin(expand($BUNDLE))

" ===== common START ======
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'

" NREDTree
" Plug 'scrooloose/nerdtree'
" Plug 'jistr/vim-nerdtree-tabs'
" Plug 'taiansu/nerdtree-ag'

" Ctrl-P 
" Plug 'kien/ctrlp.vim'  the project is unmaintained
" Plug 'ctrlpvim/ctrlp.vim'
Plug 'airblade/vim-rooter', { 'on': [] }

Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'junegunn/fzf.vim'

" Indent Guides 显示缩进
Plug 'nathanaelkane/vim-indent-guides'

Plug 'tpope/vim-fugitive'

" 快速移动
Plug 'Lokaltog/vim-easymotion'
" Plug 'bling/vim-airline'
Plug 'vim-airline/vim-airline'


Plug 'rking/ag.vim'

Plug 'editorconfig/editorconfig-vim'

Plug 'tpope/vim-commentary'

" Git 修改行数
Plug 'mhinz/vim-signify'

" LSP 补全
Plug 'neoclide/coc.nvim', {'branch': 'release'}

Plug 'godlygeek/tabular', { 'on':  'Tabularize' }
" ===== common END======

" note taking
Plug 'vimwiki/vimwiki'

" markdown
Plug 'preservim/vim-markdown'


" colors
Plug 'altercation/vim-colors-solarized'
Plug 'tomasiser/vim-code-dark'
Plug 'tomasr/molokai'

" web
Plug 'mattn/emmet-vim', {'for': ['html', 'javascriptreact']}
Plug 'leafgarland/typescript-vim'
Plug 'peitalin/vim-jsx-typescript'


" golang
Plug 'fatih/vim-go', {'for': 'go'}


" snippets
" Plug 'SirVer/ultisnips'
Plug 'honza/vim-snippets'

call plug#end() " Should run at last

" drop vi support - kept for vim compatibility but not needed for nvim
set nocompatible
syntax on
filetype plugin on


let mapleader = ","

" number of lines at the beginning and end of files checked for file-specific vars
set modelines=0

" reload files changed outside of Vim not currently modified in Vim (needs below)
" set autoread

" http://stackoverflow.com/questions/2490227/how-does-vims-autoread-work#20418591
au FocusGained,BufEnter * :silent! !

" use Unicode
set encoding=utf-8
set fenc=utf-8
" set fencs=iso-2022-jp,euc-jp,cp932

" errors flash screen rather than emit beep
set visualbell

" make Backspace work like Delete
set backspace=indent,eol,start

" don't create `filename~` backups
set nobackup

" don't create temp files
set noswapfile

" line numbers and distances
" set relativenumber 
set number 

" number of lines offset when jumping
set scrolloff=2

" Tab key enters 2 spaces
" To enter a TAB character when `expandtab` is in effect,
" CTRL-v-TAB
set expandtab tabstop=2 shiftwidth=2 softtabstop=2 

" Indent new line the same as the preceding line
set autoindent

" statusline indicates insert or normal mode
set showmode showcmd

" make scrolling and painting fast
" ttyfast kept for vim compatibility but not needed for nvim
set ttyfast lazyredraw

" highlight matching parens, braces, brackets, etc
set showmatch

" http://vim.wikia.com/wiki/Searching
set hlsearch incsearch ignorecase smartcase

" As opposed to `wrap`
"set nowrap

" http://vim.wikia.com/wiki/Set_working_directory_to_the_current_file
set autochdir

" open new buffers without saving current modifications (buffer remains open)
set hidden

" http://stackoverflow.com/questions/9511253/how-to-effectively-use-vim-wildmenu
set wildmenu wildmode=list:longest,full

" StatusLine always visible, display full path
" http://learnvimscriptthehardway.stevelosh.com/chapters/17.html
set laststatus=2 statusline=%F

" Use system clipboard
" http://vim.wikia.com/wiki/Accessing_the_system_clipboard
set clipboard=unnamedplus

" Show character column
highlight ColorColumn ctermbg=DarkBlue
set colorcolumn=120

" CursorLine - sometimes autocmds are not performant; turn off if so
" http://vim.wikia.com/wiki/Highlight_current_line
set cursorline
" Normal mode
" highlight CursorLine ctermbg=None
" autocmd InsertEnter * highlight  CursorLine ctermbg=17 ctermfg=None
" autocmd InsertLeave * highlight  CursorLine ctermbg=None ctermfg=None

" color
colorscheme solarized

" For when you forget to sudo.. Really Write the file.
cmap w!! w !sudo tee % >/dev/null

" ======== 配置 emmet ===============
let g:user_emmet_settings = {
\  'javascript.jsx' : {
\      'extends' : ['jsx', 'txs'],
\      'attribute_name': {'class': 'className', 'for': 'htmlFor'}, 
\      'empty_element_suffix': ' />', 
\  },
\}

" ==END=== 配置 emmet ===============


" ============= NERDTree =====================
" map <leader>e :NERDTreeTabsToggle<CR>
" " 打开当前文件所在目录的Tree
" map <leader>ce :NERDTreeFind<CR>
" 
" let NERDTreeIgnore=['\.py[cd]$', '\~$', '\.swo$', '\.swp$', '^\.git$', '^\.hg$', '^\.svn$', '\.bzr$']
" " ========== END NERDTree ====================
"
"

" ============= CtrlP =====================
" 使用the silver searcher来搜索, 不好用！！
"    let g:ctrlp_user_command = 'ag %s -l'
"     let g:ctrlp_custom_ignore = {
"       \ 'dir':  '\v[\/]\.?(git|hg|svn|node_modules|bower_components|release|build)$',
"       \ 'file': '\v\.(exe|so|dll)$',
"       \ 'link': '\v\.(swp)$',
"       \ }
" =======END=== CtrlP =====================


" ============= Indent Guide  =====================
    let g:indent_guides_guide_size = 1
    let g:indent_guides_enable_on_vim_startup = 1
" ========== END Indent Guide ===================


" " ============= AirLine =====================
"     set statusline=%<%f\ %h%m%r%{fugitive#statusline()}%=%-14.(%l,%c%V%)\ %P
"      if !exists('g:airline_symbols')
"          let g:airline_symbols = {}
"      endif
"      " let g:airline_symbols.branch = '⎇'
"      " let g:airline_symbols.branch = '⎇'
"      let g:airline_symbols.branch = ''
 
"      set statusline+=%#goStatuslineColor#
"      set statusline+=%{go#statusline#Show()}
"      set statusline+=%*
" " ========== END AirLine ====================


" ===============Easy Motion======================
    " nmap s <Plug>(easymotion-overwin-f2)
    map <Leader>j <Plug>(easymotion-j)
    map <Leader>k <Plug>(easymotion-k)
    map <Leader>m <Plug>(easymotion-w)
    map <Leader>M <Plug>(easymotion-b)


" ====END========Easy Motion======================

" =================Misc===========================
" 据说有些情况会有中文乱码的解决方案 Chinese 
" set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
" =================Misc end=======================

" ===== vimwiki =======
let g:vimwiki_list = [{'path': '~/vimwiki/',
      \ 'syntax': 'markdown', 'ext': '.md'}]
let g:vimwiki_dir_link = 'index'
let g:vimwiki_folding = 'expr'
let g:vimwiki_ext2syntax = {'.md': 'markdown',
      \ '.mkd': 'markdown',
      \ '.wiki': 'media'}
" =END= vimwiki =======


" ============ vim-markdown ===========
let g:vim_markdown_fenced_languages = ['ts=typescript']

" ==END======= vim-markdown ===========

source ~/.dotfiles/vim/coc.vim
source ~/.dotfiles/vim/fzf.vim

